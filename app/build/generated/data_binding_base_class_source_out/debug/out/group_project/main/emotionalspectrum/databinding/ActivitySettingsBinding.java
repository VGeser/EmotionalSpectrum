// Generated by view binder compiler. Do not edit!
package group_project.main.emotionalspectrum.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import group_project.main.emotionalspectrum.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button buttonBack;

  @NonNull
  public final Button buttonDelete;

  @NonNull
  public final SwitchCompat switch1;

  @NonNull
  public final SwitchCompat switch2;

  @NonNull
  public final SwitchCompat switch3;

  private ActivitySettingsBinding(@NonNull RelativeLayout rootView, @NonNull Button buttonBack,
      @NonNull Button buttonDelete, @NonNull SwitchCompat switch1, @NonNull SwitchCompat switch2,
      @NonNull SwitchCompat switch3) {
    this.rootView = rootView;
    this.buttonBack = buttonBack;
    this.buttonDelete = buttonDelete;
    this.switch1 = switch1;
    this.switch2 = switch2;
    this.switch3 = switch3;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_back;
      Button buttonBack = ViewBindings.findChildViewById(rootView, id);
      if (buttonBack == null) {
        break missingId;
      }

      id = R.id.button_delete;
      Button buttonDelete = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.switch1;
      SwitchCompat switch1 = ViewBindings.findChildViewById(rootView, id);
      if (switch1 == null) {
        break missingId;
      }

      id = R.id.switch2;
      SwitchCompat switch2 = ViewBindings.findChildViewById(rootView, id);
      if (switch2 == null) {
        break missingId;
      }

      id = R.id.switch3;
      SwitchCompat switch3 = ViewBindings.findChildViewById(rootView, id);
      if (switch3 == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((RelativeLayout) rootView, buttonBack, buttonDelete,
          switch1, switch2, switch3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
